var H=(l=>(l[l.a8=0]="a8",l[l.b8=1]="b8",l[l.c8=2]="c8",l[l.d8=3]="d8",l[l.e8=4]="e8",l[l.f8=5]="f8",l[l.g8=6]="g8",l[l.h8=7]="h8",l[l.a7=8]="a7",l[l.b7=9]="b7",l[l.c7=10]="c7",l[l.d7=11]="d7",l[l.e7=12]="e7",l[l.f7=13]="f7",l[l.g7=14]="g7",l[l.h7=15]="h7",l[l.a6=16]="a6",l[l.b6=17]="b6",l[l.c6=18]="c6",l[l.d6=19]="d6",l[l.e6=20]="e6",l[l.f6=21]="f6",l[l.g6=22]="g6",l[l.h6=23]="h6",l[l.a5=24]="a5",l[l.b5=25]="b5",l[l.c5=26]="c5",l[l.d5=27]="d5",l[l.e5=28]="e5",l[l.f5=29]="f5",l[l.g5=30]="g5",l[l.h5=31]="h5",l[l.a4=32]="a4",l[l.b4=33]="b4",l[l.c4=34]="c4",l[l.d4=35]="d4",l[l.e4=36]="e4",l[l.f4=37]="f4",l[l.g4=38]="g4",l[l.h4=39]="h4",l[l.a3=40]="a3",l[l.b3=41]="b3",l[l.c3=42]="c3",l[l.d3=43]="d3",l[l.e3=44]="e3",l[l.f3=45]="f3",l[l.g3=46]="g3",l[l.h3=47]="h3",l[l.a2=48]="a2",l[l.b2=49]="b2",l[l.c2=50]="c2",l[l.d2=51]="d2",l[l.e2=52]="e2",l[l.f2=53]="f2",l[l.g2=54]="g2",l[l.h2=55]="h2",l[l.a1=56]="a1",l[l.b1=57]="b1",l[l.c1=58]="c1",l[l.d1=59]="d1",l[l.e1=60]="e1",l[l.f1=61]="f1",l[l.g1=62]="g1",l[l.h1=63]="h1",l[l.no_sq=64]="no_sq",l))(H||{});var F=class{constructor(){this.isChess960=!1;this.SquareBigInt=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n];this.CharToPiece=new Map([["P",{Type:0,Color:0}],["N",{Type:1,Color:0}],["B",{Type:2,Color:0}],["R",{Type:3,Color:0}],["Q",{Type:4,Color:0}],["K",{Type:5,Color:0}],["p",{Type:0,Color:1}],["n",{Type:1,Color:1}],["b",{Type:2,Color:1}],["r",{Type:3,Color:1}],["q",{Type:4,Color:1}],["k",{Type:5,Color:1}]]);this.PieceToChar=new Map([[0,"P"],[1,"N"],[2,"B"],[3,"R"],[4,"Q"],[5,"K"]]);this.Zobrist={Pieces:Array.from(Array(2),()=>Array.from(Array(6),()=>new Array(64))),EnPassant:new BigUint64Array(64),Castle:new BigUint64Array(16),SideToMove:0n};this.PhaseValues=[0,1,1,2,4,0];this.PhaseTotal=this.PhaseValues[1]*4+this.PhaseValues[2]*4+this.PhaseValues[3]*4+this.PhaseValues[4]*2;this.BoardHistory=[];this.BoardState={PiecesBB:new BigUint64Array(12),OccupanciesBB:new BigUint64Array(2),Squares:new Array(64).fill(void 0),SideToMove:0,EnPassSq:64,HalfMoves:0,Ply:0,Hash:0n,PawnHash:0n,Phase:this.PhaseTotal,CastlingRights:0,CastlingPaths:[],CastlingRookSquares:[],CastlingSquaresMask:new Array(64).fill(15)};this.rankMasks=new BigUint64Array(64);this.fileMasks=new BigUint64Array(64);this.isolatedMasks=new BigUint64Array(64);this.passedMasks=Array(2).fill(0).map(()=>Array(64).fill(0));this.betweenMasks=Array(64).fill(0n).map(()=>Array(64).fill(0n));this.attackRays=Array.from(Array(3),()=>new Array(64).fill(0n));this.squareBB=new BigUint64Array(64);this.distanceBetween=Array(64).fill(0n).map(()=>Array(64).fill(0n));this.notAFile=18374403900871474942n;this.notHFile=9187201950435737471n;this.notHGFile=4557430888798830399n;this.notABFile=18229723555195321596n;this.PawnAttacks=new BigUint64Array(128);this.KnightAttacks=new BigUint64Array(64);this.KingAttacks=new BigUint64Array(64);this.BishopMasks=new BigUint64Array(64);this.BishopAttacks=Array.from(Array(64),()=>new Array(512));this.RookMasks=new BigUint64Array(64);this.RookAttacks=Array.from(Array(64),()=>new Array(4096));this.BishopMagicNumbers=[0x2004200884050840n,0x410100220842020n,0x4008108408800844n,0x4188204040844200n,0x2044030841204080n,0x5008229010048001n,0x48809008228000n,0xa00210050100800n,0x40121020020c006an,0x1441004012828n,0x5188202420508n,0x1106404208c00a1n,0x2820884841010000n,0x1800020802480841n,0x48440048041008c0n,0x128c1a020686a800n,0x4808011191100080n,0x885402008208102n,0x204000818002008n,0x28000c204010a0n,0x204a000404a20020n,0x4001000020a01000n,0x9008912044100888n,0x5603c082090901n,0x6620700048230800n,0x18100d00820c1c02n,0x49222002c040403n,0x20808088020002n,0x4038c000280201an,0x2080836809011n,0x102008432280100n,0x201c302011280n,0x121008040122c400n,0x104014801200211n,0x3800223400080800n,0x14020080480080n,0x2004040400001010n,0xd0510040460041n,0x1180082010460n,0x4208c0040370504n,0x12010440002200n,0x40104208440020a0n,0x1d0c0048001404n,0x804204010452200n,0xa08102010401208n,0x230115001002020n,0x2008028082040402n,0x408080060480380n,0x1010802402080n,0x403088090086800n,0x20a0020201041000n,0x200a8042420e0800n,0x8004008a1010400n,0x910230010004n,0xc0100200811040n,0x2202102307050410n,0x20208200904000n,0x4002104100411n,0x8010000044040490n,0xa0008040840400n,0x1006001110121201n,0xc00c4088017108n,0x2800080210020210n,0x60200a1002018910n];this.RookMagicNumbers=[0x80016418400081n,0x40004010002000n,0x48020011000800an,0xc800c8290000800n,0x200080420020010n,0x8100020400080100n,0x8080008002000100n,0xe10000c600288100n,0x800080304000n,0xa00210a004081n,0xb0080200010008an,0x8808008001000n,0x1004808004000800n,0x92000600508c08n,0x100400040102d018n,0x8004e9000a80n,0x21b4228000400082n,0x41010020804000n,0x208c110020090040n,0x2030010020081100n,0x300808008000400n,0x9202008080040002n,0x400804000201b008n,0x1060020004008041n,0x36846080034000n,0x208040008020008cn,0x200080100080n,0x2088100080080080n,0x1800808004000an,0x812040080020080n,0x8041010400100802n,0x904a482000c00c3n,0x40204000800080n,0x40201008400041n,0xa10040800200020n,0x380801004800800n,0x804000800800480n,0x184800200800400n,0x1002100104004882n,0x240186000943n,0x100802040188000n,0x890004020004000n,0x4810080400202000n,0x2c00100008008080n,0x8000805010010n,0x200c010002004040n,0x1001c21011340048n,0x4084146081020004n,0x102002080410200n,0xa004088210200n,0x804200281200n,0x100008008080n,0x110a080081040080n,0x4010002004040n,0x400c08294a100400n,0x12441080410a00n,0x608880f1020240a2n,0x108025004202n,0xa4c401020000d01n,0x19000410000821n,0x4052009120080402n,0x2000884011002n,0x20c100104b2080cn,0xc04104100840022n];this.BishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n];this.RookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n];this.PRNG_SEED=192085716n;this.boardStates=[];this.TT_Size=32*1024*1024/16;this.TT_Hash=new BigUint64Array(this.TT_Size);this.TT_Depth=new Uint8Array(this.TT_Size);this.TT_Move=new Uint16Array(this.TT_Size);this.TT_Score=new Int16Array(this.TT_Size);this.TT_Flag=new Uint8Array(this.TT_Size);this.TTSize=BigInt(32*1024*1024/16);this.TTUsed=0;this.PawnTableSize=4*1024*1024/16;this.PawnTableSize_Index=BigInt(this.PawnTableSize);this.PawnTable_Hash=new BigUint64Array(this.PawnTableSize);this.PawnTable_MGScore=new Int16Array(this.PawnTableSize);this.PawnTable_EGScore=new Int16Array(this.PawnTableSize);this.PawnTable_STM=new Uint8Array(this.PawnTableSize);this.PST=[[[0,0,0,0,0,0,0,0,43,42,29,35,18,19,2,17,-9,1,-2,21,3,49,16,-10,-24,-22,-21,-6,3,-13,-10,-19,-29,-25,-21,-5,-9,-7,15,-14,-31,-27,-26,-20,-16,-12,44,-1,-35,-30,-36,-34,-32,9,54,-9,0,0,0,0,0,0,0,0],[-39,-4,-4,-5,6,-4,1,-29,-24,-13,10,30,33,37,-14,3,-13,12,17,46,43,75,34,13,-6,-4,12,27,0,48,2,33,-17,3,7,-1,9,9,-1,-15,-27,-14,-6,-8,3,-9,10,-37,-30,-26,-24,-9,-8,-15,-13,-8,-20,-18,-30,-34,-23,-16,-23,-28],[-12,-15,-8,-4,-9,-6,-1,-5,-16,-5,7,-3,10,0,-5,-3,-4,2,14,26,26,80,36,36,-21,-14,7,25,14,-6,-9,-4,-9,2,-8,24,11,-1,-7,-17,-10,0,-2,-7,-3,0,5,1,-26,-7,2,-10,-12,-3,14,12,-21,-7,-14,-28,-13,-30,-10,-20],[3,-1,8,25,21,20,16,19,-32,-22,0,19,20,31,36,18,-35,-20,-11,2,25,30,13,7,-33,-32,-25,-3,-6,6,11,-6,-36,-33,-43,-17,-8,-8,14,-25,-46,-31,-37,-25,-31,-29,9,-23,-29,-42,-31,-26,-16,7,-13,-33,-20,-35,-33,-24,-20,-10,-50,-10],[-35,-8,4,13,27,25,21,28,-31,-19,-8,12,14,67,54,49,-21,-13,-16,21,46,69,71,37,-18,-12,-8,1,7,18,3,-1,-10,-9,-19,-17,-11,-4,6,-13,-30,-1,-14,-13,-19,-13,5,-13,-31,-15,-13,-2,-2,-3,-18,-26,-18,-34,-30,1,-19,-32,-18,-9],[-1,1,0,2,0,2,1,-1,-1,3,4,2,5,5,6,2,0,2,4,6,8,11,9,5,-2,1,4,1,2,6,-1,-3,-1,1,-4,-4,3,-17,-17,-32,-3,-7,-11,-21,-21,-16,-21,-24,-5,-2,-8,-50,-32,-56,33,53,-7,-22,-4,-52,32,-50,61,53]],[[0,0,0,0,0,0,0,0,69,70,60,35,40,40,55,67,43,45,25,-16,4,4,38,39,12,-2,-16,-42,-34,-22,-10,-7,-3,-13,-25,-38,-35,-30,-25,-29,-15,-18,-26,-25,-26,-23,-40,-34,-1,-5,-8,-50,-16,-10,-23,-29,0,0,0,0,0,0,0,0],[-30,-5,-4,-2,3,-1,0,-19,-21,-6,17,26,13,-1,-13,-16,-15,12,30,30,30,19,-3,-14,-7,9,31,47,37,23,22,-9,-9,0,36,29,37,15,1,-5,-30,-3,10,22,13,10,-18,-17,-14,-8,-9,9,-12,-10,-12,-14,-18,-69,-26,-8,-12,-16,-49,-26],[-6,-14,-1,1,2,3,7,-6,2,4,0,4,6,13,2,-26,-5,11,15,-3,20,37,18,3,-6,25,20,33,22,24,16,-8,-7,-2,38,27,22,12,-5,-20,-23,3,26,22,27,11,-12,-13,-20,-31,-15,1,3,-8,-11,-19,-20,-34,-50,-11,-23,-35,-8,-21],[10,21,21,20,23,24,24,26,29,31,28,26,19,9,22,9,27,19,20,10,6,15,23,9,14,17,22,8,-6,13,4,-4,-4,1,21,5,-10,-8,-5,-18,-8,-14,1,-6,-11,-11,-21,-29,-23,-27,-12,-16,-21,-32,-15,-27,-15,-2,6,-1,-7,-14,-7,-72],[-13,3,15,11,21,27,11,19,-22,-9,10,10,30,39,29,11,-31,-15,-5,4,36,50,36,13,-27,-8,2,25,32,33,25,16,-39,-10,1,46,21,18,4,13,-17,-36,2,-2,21,10,3,-8,-16,-13,-17,-33,-28,-26,-12,-11,-20,-22,-18,-65,-16,-28,-16,-7],[-17,-5,-1,-1,1,8,4,-8,-6,16,18,10,19,27,31,4,3,26,25,27,33,47,41,21,-12,27,26,30,29,45,34,4,-17,-6,15,19,21,19,12,-20,-19,-6,4,11,11,3,-8,-20,-20,-13,-14,0,1,5,-20,-44,-19,-29,-17,-20,-85,-26,-57,-79]]];this.MGPieceValue=[69,260,270,352,905,15e3];this.EGPieceValue=[122,287,322,548,947,15e3];this.MGKnightOutpost=7;this.EGKnightOutpost=16;this.MGRookOpenFileBonus=40;this.MGRookSemiOpenFileBonus=18;this.MGBishopPair=5;this.EGBishopPair=53;this.PawnDuoMulti=[0,-5,10,32,78,44,27];this.PawnSupportMulti=[0,0,22,17,25,43,31];this.MGDoubledPawn=17;this.EGDoubledPawn=17;this.MGIsolatedPawn=9;this.EGIsolatedPawn=0;this.MGPassedPawnRank=[0,7,-3,-17,8,26,70];this.EGPassedPawnRank=[0,-2,10,43,64,82,90];this.MGCorneredBishopPenalty=3;this.EGCorneredBishopPenalty=55;this.CenterDistance=[3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3,2,1,1,1,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,1,1,1,2,3,3,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3];this.CenterManhattanDistance=[6,5,4,3,3,4,5,6,5,4,3,2,2,3,4,5,4,3,2,1,1,2,3,4,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,4,3,2,1,1,2,3,4,5,4,3,2,2,3,4,5,6,5,4,3,3,4,5,6];this.INFINITY=6e4;this.MATE=3e4;this.MAXPLY=100;this.ABORTEDSCORE=5e5;this.nodesSearched=0;this.pvArray=Array(this.MAXPLY).fill(0).map(()=>Array(this.MAXPLY).fill(0));this.pvLength=Array(this.MAXPLY).fill(0);this.killerMoves=Array(this.MAXPLY).fill(0).map(()=>Array(2).fill(0));this.historyMoves=Array(2).fill(0).map(()=>Array(64).fill(0).map(()=>Array(64).fill(0)));this.counterMoves=Array(64).fill(0).map(()=>Array(64).fill(0));this.bestMoveScore={move:0,score:-this.INFINITY};this.Timer={timeleft:-1,increment:0,depth:this.MAXPLY,movestogo:0,startTime:0,stopTime:0,movetime:-1,stop:!1,extended:!1};this.Init(),this.InitHashes()}static{this.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"}}Reset(){this.BoardHistory.length=0,this.BoardState.PiecesBB=new BigUint64Array(12),this.BoardState.OccupanciesBB=new BigUint64Array(2),this.BoardState.Squares=new Array(64).fill(void 0),this.BoardState.SideToMove=0,this.BoardState.EnPassSq=64,this.BoardState.HalfMoves=0,this.BoardState.Ply=0,this.BoardState.PawnHash=0n,this.BoardState.Phase=this.PhaseTotal,this.BoardState.CastlingRights=0,this.BoardState.CastlingPaths=[],this.BoardState.CastlingRookSquares=[],this.BoardState.CastlingSquaresMask=new Array(64).fill(15),this.ResizeTranspositionTable(32),this.ResizePawnTable(4),this.nodesSearched=0,this.pvArray=Array(this.MAXPLY).fill(0).map(()=>Array(this.MAXPLY).fill(0)),this.pvLength=Array(this.MAXPLY).fill(0),this.killerMoves=Array(this.MAXPLY).fill(0).map(()=>Array(2).fill(0)),this.historyMoves=Array(2).fill(0).map(()=>Array(64).fill(0).map(()=>Array(64).fill(0))),this.counterMoves=Array(64).fill(0).map(()=>Array(64).fill(0))}Random64(){let e=this.PRNG_SEED;return e^=e>>12n,e^=BigInt.asUintN(64,e<<25n),e^=e>>27n,this.PRNG_SEED=e,BigInt.asUintN(64,e*2685821657736338717n)}FindMagics(e){let t=new BigUint64Array(4096),i=new BigUint64Array(4096),s=e===2;for(let o=0;o<=63;o++){let a=0n,r=s?this.GenerateBishopMasks(o):this.GenerateRookMasks(o),h=s?this.BishopRelevantBits[o]:this.RookRelevantBits[o],n=Number(this.CountBits(r));for(let c=0;c<1<<n;c++)t[c]=this.SetOccupancy(c,n,r),i[c]=s?this.GenerateBishopAttacksFly(o,t[c]):this.GenerateRookAttacksFly(o,t[c]);for(;;){if(a=BigInt.asUintN(64,this.Random64()&this.Random64()&this.Random64()),this.CountBits(BigInt.asUintN(64,r*a)&0xFF00000000000000n)<6)continue;let c=new BigUint64Array(4096),d=!1;for(let u=0;u<1<<n;u++){let P=Number(BigInt.asUintN(64,t[u]*a)>>64n-h);if(c[P]===0n)c[P]=i[u];else if(c[P]!==i[u]){d=!0;break}}if(!d)break}}}SetBit(e,t){return e|=1n<<this.SquareBigInt[t]}RemoveBit(e,t){return e&=~(1n<<this.SquareBigInt[t])}GetBit(e,t){return e&1n<<this.SquareBigInt[t]}CountBits(e){let t=Number(e&0xffffffffn),i=Number(e>>32n);function s(o){return o=o-(o>>1&1431655765),o=(o&858993459)+(o>>2&858993459),(o+(o>>4)&252645135)*16843009>>24}return s(t)+s(i)}GetLS1B(e){return this.CountBits((e&-e)-1n)}SetOccupancy(e,t,i){let s=0n;for(let o=0;o<t;o++){let a=this.GetLS1B(i);i=this.RemoveBit(i,a),e&1<<o&&(s|=1n<<this.SquareBigInt[a])}return BigInt.asUintN(64,s)}Shift(e,t){switch(t){case 8:return e>>8n;case-8:return BigInt.asUintN(64,e<<8n);case 1:return(e&this.notHFile)<<1n;case-1:return(e&this.notAFile)>>1n;case 9:return(e&this.notAFile)>>9n;case 7:return(e&this.notHFile)>>7n;case-9:return(e&this.notHFile)<<9n;case-7:return(e&this.notAFile)<<7n}}Fill(e,t){let i=this.squareBB[t];return e===8?(i|=i>>8n,i|=i>>16n,i|=i>>32n):(i|=i<<8n,i|=i<<16n,i|=i<<32n),this.Shift(i,e)}Init(){let e=-1n,t=0x0001010101010100n,i=0x0040201008040200n,s=0x0002040810204080n,o,a,r,h;for(let n=0;n<=63;n++){this.squareBB[n]=this.SetBit(0n,n),this.rankMasks[n]=0xffn<<(BigInt(n)&56n),this.fileMasks[n]=0x0101010101010101n<<(BigInt(n)&7n),this.isolatedMasks[n]=(this.fileMasks[n]&this.notHFile)<<1n|(this.fileMasks[n]&this.notAFile)>>1n,this.PawnAttacks[n]=this.MaskPawnAttacks(0,n),this.PawnAttacks[n+64]=this.MaskPawnAttacks(1,n),this.KnightAttacks[n]=this.MaskKnightAttacks(n),this.KingAttacks[n]=this.MaskKingAttacks(n),this.BishopMasks[n]=this.GenerateBishopMasks(n);let c=this.CountBits(this.BishopMasks[n]),d=1<<c;for(let P=0;P<d;P++){let S=this.SetOccupancy(P,c,this.BishopMasks[n]),B=BigInt.asUintN(64,S*this.BishopMagicNumbers[n])>>64n-this.BishopRelevantBits[n];this.BishopAttacks[n][Number(B)]=this.GenerateBishopAttacksFly(n,S)}this.RookMasks[n]=this.GenerateRookMasks(n),c=this.CountBits(this.RookMasks[n]),d=1<<c;for(let P=0;P<d;P++){let S=this.SetOccupancy(P,c,this.RookMasks[n]),B=BigInt.asUintN(64,S*this.RookMagicNumbers[n])>>64n-this.RookRelevantBits[n];this.RookAttacks[n][Number(B)]=this.GenerateRookAttacksFly(n,S)}this.attackRays[0][n]=this.GenerateBishopAttacks(0n,n),this.attackRays[2][n]|=this.attackRays[0][n],this.attackRays[1][n]=this.GenerateRookAttacks(0n,n),this.attackRays[2][n]|=this.attackRays[1][n];let u=this.fileMasks[n]|(this.fileMasks[n]&this.notAFile)>>1n|(this.fileMasks[n]&this.notHFile)<<1n;this.passedMasks[0][n]=u,this.passedMasks[1][n^56]=u;for(let P=0;P<64;P++){let S=n>>3,B=P>>3,g=n&7,f=P&7;this.distanceBetween[n][P]=Math.max(Math.abs(B-S),Math.abs(f-g)),o=e<<BigInt(n)^e<<BigInt(P),h=(BigInt(P)&7n)-(BigInt(n)&7n),r=(BigInt(P)|7n)-BigInt(n)>>3n,a=(h&7n)-1n&t,a+=2n*((r&7n)-1n>>58n),a+=(r-h&15n)-1n&i,a+=(r+h&15n)-1n&s,a*=o&-o,this.betweenMasks[n][P]=BigInt.asUintN(64,a&o)}}for(let n=0;n<=63;n++){for(let c=n;c<=63;c+=8)this.passedMasks[0][n]&=~this.rankMasks[c];for(let c=n;c>=0;c-=8)this.passedMasks[1][n^56]&=~this.rankMasks[c]}}InitHashes(){for(let e=0;e<=5;e++)for(let t=0;t<=63;t++)this.Zobrist.Pieces[0][e][t]=this.Random64(),this.Zobrist.Pieces[1][e][t]=this.Random64();for(let e=0;e<=63;e++)this.Zobrist.EnPassant[e]=this.Random64();for(let e=0;e<16;e++)this.Zobrist.Castle[e]=this.Random64();this.Zobrist.SideToMove=this.Random64()}GenerateHashes(){let e=0n,t=0n;for(let i=0;i<=63;i++){let s=this.BoardState.Squares[i];s&&(e^=this.Zobrist.Pieces[s.Color][s.Type][i],s.Type===0&&(t^=this.Zobrist.Pieces[s.Color][0][i]))}return this.BoardState.EnPassSq!==64&&(e^=this.Zobrist.EnPassant[this.BoardState.EnPassSq]),e^=this.Zobrist.Castle[this.BoardState.CastlingRights],this.BoardState.SideToMove===1&&(e^=this.Zobrist.SideToMove),{hash:e,pawnHash:t}}MaskPawnAttacks(e,t){let i=0n,s=0n;return s=this.SetBit(s,t),e?(s<<7n&this.notHFile&&(i|=s<<7n),s<<9n&this.notAFile&&(i|=s<<9n)):(s>>7n&this.notAFile&&(i|=s>>7n),s>>9n&this.notHFile&&(i|=s>>9n)),BigInt.asUintN(64,i)}MaskKnightAttacks(e){let t=0n,i=0n;return i=this.SetBit(i,e),i>>17n&this.notHFile&&(t|=i>>17n),i>>15n&this.notAFile&&(t|=i>>15n),i>>10n&this.notHGFile&&(t|=i>>10n),i>>6n&this.notABFile&&(t|=i>>6n),i<<17n&this.notAFile&&(t|=i<<17n),i<<15n&this.notHFile&&(t|=i<<15n),i<<10n&this.notABFile&&(t|=i<<10n),i<<6n&this.notHGFile&&(t|=i<<6n),BigInt.asUintN(64,t)}MaskKingAttacks(e){let t=0n,i=0n;return i=this.SetBit(i,e),i>>8n&&(t|=i>>8n),i>>9n&this.notHFile&&(t|=i>>9n),i>>7n&this.notAFile&&(t|=i>>7n),i>>1n&this.notHFile&&(t|=i>>1n),i<<8n&&(t|=i<<8n),i<<9n&this.notAFile&&(t|=i<<9n),i<<7n&this.notHFile&&(t|=i<<7n),i<<1n&this.notAFile&&(t|=i<<1n),BigInt.asUintN(64,t)}GenerateBishopMasks(e){let t=0n,i=Math.floor(e/8),s=e%8;for(let o=i+1,a=s+1;o<=6&&a<=6;o++,a++)t|=1n<<BigInt(o)*8n+BigInt(a);for(let o=i-1,a=s+1;o>=1&&a<=6;o--,a++)t|=1n<<BigInt(o)*8n+BigInt(a);for(let o=i+1,a=s-1;o<=6&&a>=1;o++,a--)t|=1n<<BigInt(o)*8n+BigInt(a);for(let o=i-1,a=s-1;o>=1&&a>=1;o--,a--)t|=1n<<BigInt(o)*8n+BigInt(a);return BigInt.asUintN(64,t)}GenerateBishopAttacksFly(e,t){let i=0n,s=Math.floor(e/8),o=e%8;for(let a=s+1,r=o+1;a<=7&&r<=7&&(i|=1n<<BigInt(a)*8n+BigInt(r),!(1n<<BigInt(a)*8n+BigInt(r)&t));a++,r++);for(let a=s-1,r=o+1;a>=0&&r<=7&&(i|=1n<<BigInt(a)*8n+BigInt(r),!(1n<<BigInt(a)*8n+BigInt(r)&t));a--,r++);for(let a=s+1,r=o-1;a<=7&&r>=0&&(i|=1n<<BigInt(a)*8n+BigInt(r),!(1n<<BigInt(a)*8n+BigInt(r)&t));a++,r--);for(let a=s-1,r=o-1;a>=0&&r>=0&&(i|=1n<<BigInt(a)*8n+BigInt(r),!(1n<<BigInt(a)*8n+BigInt(r)&t));a--,r--);return BigInt.asUintN(64,i)}GenerateRookMasks(e){let t=0n,i=Math.floor(e/8),s=e%8;for(let o=i+1;o<=6;o++)t|=1n<<BigInt(o)*8n+BigInt(s);for(let o=i-1;o>=1;o--)t|=1n<<BigInt(o)*8n+BigInt(s);for(let o=s+1;o<=6;o++)t|=1n<<BigInt(i)*8n+BigInt(o);for(let o=s-1;o>=1;o--)t|=1n<<BigInt(i)*8n+BigInt(o);return BigInt.asUintN(64,t)}GenerateRookAttacksFly(e,t){let i=0n,s=Math.floor(e/8),o=e%8;for(let a=s+1;a<=7&&(i|=1n<<BigInt(a)*8n+BigInt(o),!(1n<<BigInt(a)*8n+BigInt(o)&t));a++);for(let a=s-1;a>=0&&(i|=1n<<BigInt(a)*8n+BigInt(o),!(1n<<BigInt(a)*8n+BigInt(o)&t));a--);for(let a=o+1;a<=7&&(i|=1n<<BigInt(s)*8n+BigInt(a),!(1n<<BigInt(s)*8n+BigInt(a)&t));a++);for(let a=o-1;a>=0&&(i|=1n<<BigInt(s)*8n+BigInt(a),!(1n<<BigInt(s)*8n+BigInt(a)&t));a--);return BigInt.asUintN(64,i)}EncodeMove(e,t,i){return(i&15)<<12|(e&63)<<6|t&63}MoveType(e){return e>>12&15}HasFlag(e,t){return(e>>12&t)!==0}IsCapture(e){return(e>>12&4)!==0}IsPromotion(e){return(e>>12&8)!==0}MoveTo(e){return e&63}MoveFrom(e){return e>>6&63}IsCastle(e){return this.MoveType(e)===2||this.MoveType(e)===3}StringifyMove(e){let t=this.MoveFrom(e),i=this.MoveTo(e),s=this.MoveType(e);this.IsCastle(e)&&!this.isChess960&&(i=i>t?i-1:i+2);let o=`${H[t]}${H[i]}`;return this.HasFlag(e,8)&&((s===8||s===12)&&(o+="n"),(s===9||s===13)&&(o+="b"),(s===10||s===14)&&(o+="r"),(s===11||s===15)&&(o+="q")),o}GenerateBishopAttacks(e,t){return e=BigInt.asUintN(64,(e&this.BishopMasks[t])*this.BishopMagicNumbers[t]),e>>=64n-this.BishopRelevantBits[t],this.BishopAttacks[t][Number(e)]}GenerateRookAttacks(e,t){return e=BigInt.asUintN(64,(e&this.RookMasks[t])*this.RookMagicNumbers[t]),e>>=64n-this.RookRelevantBits[t],this.RookAttacks[t][Number(e)]}GeneratePawnMoves(e=!1){let t=[],i=this.BoardState.SideToMove,s=this.BoardState.PiecesBB[0+6*i],o=~(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1]),a=this.BoardState.OccupanciesBB[i^1],r=this.rankMasks[40],h=8,n=9,c=7,d=~this.rankMasks[0];if(i===1&&(r=this.rankMasks[16],h=-8,n=-9,c=-7,d=~this.rankMasks[56]),!e){let B=this.Shift(s,h)&o&d,g=this.Shift(B&r,h)&o;for(;B;){let f=this.GetLS1B(B);B=this.RemoveBit(B,f),t.push(this.EncodeMove(f+h,f,0))}for(;g;){let f=this.GetLS1B(g);g=this.RemoveBit(g,f),t.push(this.EncodeMove(f+2*h,f,0))}}let u=this.Shift(s,c)&a,P=this.Shift(s,n)&a;for(;u;){let B=this.GetLS1B(u);u=this.RemoveBit(u,B),i===0&&B<=7||i===1&&B>=56?t.push(this.EncodeMove(B+c,B,12),this.EncodeMove(B+c,B,13),this.EncodeMove(B+c,B,14),this.EncodeMove(B+c,B,15)):t.push(this.EncodeMove(B+c,B,4))}for(;P;){let B=this.GetLS1B(P);P=this.RemoveBit(P,B),i===0&&B<=7||i===1&&B>=56?t.push(this.EncodeMove(B+n,B,12),this.EncodeMove(B+n,B,13),this.EncodeMove(B+n,B,14),this.EncodeMove(B+n,B,15)):t.push(this.EncodeMove(B+n,B,4))}let S=this.Shift(s,h)&o&~d;for(;S;){let B=this.GetLS1B(S);S=this.RemoveBit(S,B),t.push(this.EncodeMove(B+h,B,8),this.EncodeMove(B+h,B,9),this.EncodeMove(B+h,B,10),this.EncodeMove(B+h,B,11))}if(this.BoardState.EnPassSq!==64&&this.PawnAttacks[this.BoardState.EnPassSq+64*(this.BoardState.SideToMove^1)]&s){let B=this.Shift(s,c)&this.squareBB[this.BoardState.EnPassSq],g=this.Shift(s,n)&this.squareBB[this.BoardState.EnPassSq];for(;B;){let f=this.GetLS1B(B);B=this.RemoveBit(B,f),t.push(this.EncodeMove(f+c,f,5))}for(;g;){let f=this.GetLS1B(g);g=this.RemoveBit(g,f),t.push(this.EncodeMove(f+n,f,5))}}return t}GenerateMoves(e=!1){let t=[],i=this.BoardState.OccupanciesBB[this.BoardState.SideToMove^1],s=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1],o=~s,a=this.BoardState.OccupanciesBB[this.BoardState.SideToMove]&~this.BoardState.PiecesBB[0+6*this.BoardState.SideToMove];for(t.push(...this.GeneratePawnMoves(e));a;){let r=this.GetLS1B(a);a=this.RemoveBit(a,r);let h=this.BoardState.Squares[r].Type,n=0n;switch(h){case 1:{n=this.KnightAttacks[r];break}case 2:{n=this.GenerateBishopAttacks(s,r);break}case 3:{n=this.GenerateRookAttacks(s,r);break}case 4:{n=this.GenerateBishopAttacks(s,r)|this.GenerateRookAttacks(s,r);break}case 5:{n=this.KingAttacks[r];break}default:throw new Error("Invalid piece in move gen.")}if(!e){let d=n&o;for(;d;){let u=this.GetLS1B(d);d=this.RemoveBit(d,u),t.push(this.EncodeMove(r,u,0))}}let c=n&i;for(;c;){let d=this.GetLS1B(c);c=this.RemoveBit(c,d),t.push(this.EncodeMove(r,d,4))}}if(!e){let r=this.GetLS1B(this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]);this.IsSquareAttacked(r,this.BoardState.SideToMove^1)||(this.BoardState.SideToMove===0?(this.BoardState.CastlingRights&1&&(this.BoardState.CastlingPaths[1]&s)===0n&&!this.IsPathAttacked(this.betweenMasks[r][63])&&t.push(this.EncodeMove(r,this.BoardState.CastlingRookSquares[1],2)),this.BoardState.CastlingRights&2&&(this.BoardState.CastlingPaths[2]&s)===0n&&!this.IsPathAttacked(this.betweenMasks[r][58])&&t.push(this.EncodeMove(r,this.BoardState.CastlingRookSquares[2],3))):(this.BoardState.CastlingRights&4&&(this.BoardState.CastlingPaths[4]&s)===0n&&!this.IsPathAttacked(this.betweenMasks[r][7])&&t.push(this.EncodeMove(r,this.BoardState.CastlingRookSquares[4],2)),this.BoardState.CastlingRights&8&&(this.BoardState.CastlingPaths[8]&s)===0n&&!this.IsPathAttacked(this.betweenMasks[r][2])&&t.push(this.EncodeMove(r,this.BoardState.CastlingRookSquares[8],3))))}return t}GenerateLegalMoves(e=!1){let t=[],i=this.BoardState.SideToMove,s=i^1,o=this.GenerateMoves(e);for(let a of o){if(!this.MakeMove(a)){this.UnmakeMove(a);continue}let r=this.BoardState.PiecesBB[5+6*i],h=this.GetLS1B(r);this.IsSquareAttacked(h,s)||t.push(a),this.UnmakeMove(a)}return t}ScoreMoves(e,t,i){let s=[];for(let o=0;o<e.length;o++){let a=e[o],r=this.MoveFrom(a),h=this.MoveTo(a);if(a===t)s.push({move:t,score:this.INFINITY});else if(this.IsCapture(a)){let n=this.BoardState.Squares[r],c=this.BoardState.Squares[h]??{Type:0,Color:0};s.push({move:a,score:this.MGPieceValue[c.Type]-n.Type+1e4})}else a===this.killerMoves[this.BoardState.Ply][0]?s.push({move:a,score:9e3}):a===this.killerMoves[this.BoardState.Ply][1]?s.push({move:a,score:8e3}):a===this.counterMoves[this.MoveFrom(i)][this.MoveTo(i)]?s.push({move:a,score:7e3}):s.push({move:a,score:this.historyMoves[this.BoardState.SideToMove][r][h]})}return s}NextMove(e,t){let i=t;for(let o=t;o<e.length;o++)e[o].score>e[i].score&&(i=o);let s=e[t];return e[t]=e[i],e[i]=s,e[t++]}AttacksToByColor(e,t){let i=this.BoardState.PiecesBB[0+6*t]&this.PawnAttacks[e+64*(t^1)],s=this.BoardState.PiecesBB[1+6*t]&this.KnightAttacks[e],o=this.BoardState.PiecesBB[5+6*t]&this.KingAttacks[e],a=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1],r=this.BoardState.PiecesBB[2+6*t]|this.BoardState.PiecesBB[4+6*t];r&=this.GenerateBishopAttacks(a,e);let h=this.BoardState.PiecesBB[3+6*t]|this.BoardState.PiecesBB[4+6*t];return h&=this.GenerateRookAttacks(a,e),i|s|o|r|h}AttackedSquares(e,t){let i=this.BoardState.PiecesBB[0+6*e],s=this.BoardState.OccupanciesBB[e]&~i,o=9,a=7;e===1&&(o=-9,a=-7);let r=this.Shift(i,o)|this.Shift(i,a);for(;s;){let h=this.GetLS1B(s);switch(s=this.RemoveBit(s,h),this.BoardState.Squares[h].Type){case 1:{r|=this.KnightAttacks[h];break}case 2:{r|=this.GenerateBishopAttacks(t,h);break}case 3:{r|=this.GenerateRookAttacks(t,h);break}case 4:{r|=this.GenerateBishopAttacks(t,h)|this.GenerateRookAttacks(t,h);break}case 5:{r|=this.KingAttacks[h];break}default:throw new Error("Invalid piece in move gen.")}}return r}PlacePiece(e,t,i){this.BoardState.PiecesBB[e+6*t]=this.SetBit(this.BoardState.PiecesBB[e+6*t],i),this.BoardState.OccupanciesBB[t]=this.SetBit(this.BoardState.OccupanciesBB[t],i),this.BoardState.Squares[i]={Type:e,Color:t}}RemovePiece(e,t,i){this.BoardState.PiecesBB[e+6*t]=this.RemoveBit(this.BoardState.PiecesBB[e+6*t],i),this.BoardState.OccupanciesBB[t]=this.RemoveBit(this.BoardState.OccupanciesBB[t],i),this.BoardState.Squares[i]=void 0}MovePiece(e,t,i){let s=this.squareBB[t]|this.squareBB[i];this.BoardState.PiecesBB[e.Type+6*e.Color]^=s,this.BoardState.OccupanciesBB[e.Color]^=s,this.BoardState.Squares[t]=void 0,this.BoardState.Squares[i]=e}DoCastle(e,t,i){let s=i>t,o=62^e.Color*56,a=61^e.Color*56;s||(o=58^e.Color*56,a=59^e.Color*56);let r=i;this.RemovePiece(3,e.Color,r),this.RemovePiece(e.Type,e.Color,t),this.PlacePiece(3,e.Color,a),this.PlacePiece(e.Type,e.Color,o),this.BoardState.Hash^=this.Zobrist.Pieces[e.Color][3][r]^this.Zobrist.Pieces[e.Color][3][a]^this.Zobrist.Pieces[e.Color][5][o]^this.Zobrist.Pieces[e.Color][5][t]}UndoCastle(e,t){let i=this.BoardState.SideToMove,s=t>e,o=62^i*56,a=61^i*56;s||(o=58^i*56,a=59^i*56);let r=t;this.RemovePiece(3,i,a),this.RemovePiece(5,i,o),this.PlacePiece(3,i,r),this.PlacePiece(5,i,e)}MakeMove(e){let t=this.MoveFrom(e),i=this.MoveTo(e),s=this.MoveType(e),o=this.BoardState.Squares[t],a=s===5?{Type:0,Color:this.BoardState.SideToMove^1}:this.BoardState.Squares[i];if(this.boardStates.push({CastlingRights:this.BoardState.CastlingRights,EnPassSq:this.BoardState.EnPassSq,Captured:a,Hash:this.BoardState.Hash,PawnHash:this.BoardState.PawnHash,HalfMoves:this.BoardState.HalfMoves,Phase:this.BoardState.Phase}),this.BoardState.Ply++,this.BoardState.HalfMoves++,this.BoardState.EnPassSq!==64&&(this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq],this.BoardState.EnPassSq=64),this.IsCastle(e))this.DoCastle(o,t,i);else{let r=o.Color===0?8:-8;if(a!==void 0){let h=i;s===5&&(h=i+r),this.RemovePiece(a.Type,a.Color,h),this.BoardState.HalfMoves=0,this.BoardState.Hash^=this.Zobrist.Pieces[a.Color][a.Type][h],this.BoardState.Phase+=this.PhaseValues[a.Type],a.Type===0&&(this.BoardState.PawnHash^=this.Zobrist.Pieces[a.Color][a.Type][h])}if(this.MovePiece(o,t,i),this.BoardState.Hash^=this.Zobrist.Pieces[o.Color][o.Type][t]^this.Zobrist.Pieces[o.Color][o.Type][i],o.Type===0)if(this.BoardState.HalfMoves=0,this.BoardState.PawnHash^=this.Zobrist.Pieces[o.Color][o.Type][t]^this.Zobrist.Pieces[o.Color][o.Type][i],this.HasFlag(e,8)){let h=0;switch(s){case 8:case 12:{h=1;break}case 9:case 13:{h=2;break}case 10:case 14:{h=3;break}case 11:case 15:{h=4;break}}let n={Type:h,Color:o.Color};this.RemovePiece(o.Type,o.Color,i),this.PlacePiece(n.Type,n.Color,i),this.BoardState.Phase+=this.PhaseValues[0],this.BoardState.Phase-=this.PhaseValues[n.Type],this.BoardState.Hash^=this.Zobrist.Pieces[o.Color][o.Type][i]^this.Zobrist.Pieces[n.Color][n.Type][i],this.BoardState.PawnHash^=this.Zobrist.Pieces[o.Color][o.Type][i]}else(i^t)===16&&(this.BoardState.EnPassSq=i+r,this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq])}return this.BoardState.Hash^=this.Zobrist.Castle[this.BoardState.CastlingRights],this.BoardState.CastlingRights&=this.BoardState.CastlingSquaresMask[t]&this.BoardState.CastlingSquaresMask[i],this.BoardState.Hash^=this.Zobrist.Castle[this.BoardState.CastlingRights],this.BoardState.SideToMove^=1,this.BoardState.Hash^=this.Zobrist.SideToMove,this.BoardHistory[this.BoardHistory.length]=this.BoardState.Hash,!this.IsSquareAttacked(this.GetLS1B(this.BoardState.PiecesBB[5+6*(this.BoardState.SideToMove^1)]),this.BoardState.SideToMove)}UnmakeMove(e){let t=this.boardStates.pop();this.BoardState.Ply--,this.BoardHistory.pop(),this.BoardState.CastlingRights=t.CastlingRights,this.BoardState.EnPassSq=t.EnPassSq,this.BoardState.HalfMoves=t.HalfMoves,this.BoardState.Phase=t.Phase,this.BoardState.SideToMove^=1;let i=this.MoveFrom(e),s=this.MoveTo(e),o=this.BoardState.Squares[s];if(this.IsCastle(e))this.UndoCastle(i,s);else if(this.HasFlag(e,8))this.RemovePiece(o.Type,o.Color,s),this.PlacePiece(0,o.Color,i),t.Captured&&this.PlacePiece(t.Captured.Type,t.Captured.Color,s);else if(this.MovePiece(o,s,i),t.Captured){let a=s,r=t.Captured;this.MoveType(e)===5&&(a=o.Color===0?s+8:s-8),this.PlacePiece(r.Type,r.Color,a)}this.BoardState.Hash=t.Hash,this.BoardState.PawnHash=t.PawnHash}MakeNullMove(){this.boardStates.push({CastlingRights:this.BoardState.CastlingRights,EnPassSq:this.BoardState.EnPassSq,Hash:this.BoardState.Hash,HalfMoves:this.BoardState.HalfMoves,PawnHash:this.BoardState.PawnHash,Phase:this.BoardState.Phase}),this.BoardState.EnPassSq!==64&&(this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq],this.BoardState.EnPassSq=64),this.BoardState.HalfMoves=0,this.BoardState.SideToMove^=1,this.BoardState.Hash^=this.Zobrist.SideToMove,this.BoardState.Ply++}UnmakeNullMove(){let e=this.boardStates.pop();this.BoardState.CastlingRights=e.CastlingRights,this.BoardState.EnPassSq=e.EnPassSq,this.BoardState.HalfMoves=e.HalfMoves,this.BoardState.SideToMove^=1,this.BoardState.Hash=e.Hash,this.BoardState.PawnHash=e.PawnHash,this.BoardState.Ply--,this.BoardState.Phase=e.Phase}IsSquareAttacked(e,t){if(this.PawnAttacks[e+64*(t^1)]&this.BoardState.PiecesBB[0+6*t]||this.KnightAttacks[e]&this.BoardState.PiecesBB[1+6*t])return!0;let i=this.BoardState.PiecesBB[4+6*t],s=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1],o=this.BoardState.PiecesBB[2+6*t]|i;if(this.attackRays[0][e]&o&&this.GenerateBishopAttacks(s,e)&o)return!0;let a=this.BoardState.PiecesBB[3+6*t]|i;return!!(this.attackRays[1][e]&a&&this.GenerateRookAttacks(s,e)&a||this.KingAttacks[e]&this.BoardState.PiecesBB[5+6*t])}IsPathAttacked(e){let t=!1;for(;e;){let i=this.GetLS1B(e);if(e=this.RemoveBit(e,i),this.IsSquareAttacked(i,this.BoardState.SideToMove^1)){t=!0;break}}return t}ResizeTranspositionTable(e){this.TT_Size=e*1024*1024/16,this.TT_Hash=new BigUint64Array(this.TT_Size),this.TT_Depth=new Uint8Array(this.TT_Size),this.TT_Move=new Uint16Array(this.TT_Size),this.TT_Score=new Int16Array(this.TT_Size),this.TT_Flag=new Uint8Array(this.TT_Size),this.TTSize=BigInt(this.TT_Size),this.TTUsed=0}StoreEntry(e,t,i,s,o){let a=Number(e%this.TTSize);this.TT_Hash[a]===0n&&this.TTUsed++,this.TT_Hash[a]=e,this.TT_Depth[a]=t,this.TT_Move[a]=i,this.TT_Score[a]=s,this.TT_Flag[a]=o}GetEntry(e){let t=Number(e%this.TTSize),i=this.TT_Hash[t];return i!==e?null:{Hash:i,Move:this.TT_Move[t],Depth:this.TT_Depth[t],Score:this.TT_Score[t],Flag:this.TT_Flag[t]}}ResizePawnTable(e){this.PawnTableSize=e*1024*1024/16,this.PawnTableSize_Index=BigInt(this.PawnTableSize),this.PawnTable_Hash=new BigUint64Array(this.PawnTableSize),this.PawnTable_MGScore=new Int16Array(this.PawnTableSize),this.PawnTable_EGScore=new Int16Array(this.PawnTableSize),this.PawnTable_STM=new Uint8Array(this.PawnTableSize)}StorePawnHash(e,t,i,s){let o=Number(e%this.PawnTableSize_Index);this.PawnTable_Hash[o]=e,this.PawnTable_MGScore[o]=t,this.PawnTable_EGScore[o]=i,this.PawnTable_STM[o]=s}GetPawnEntry(e){let t=Number(e%this.PawnTableSize_Index),i=this.PawnTable_Hash[t];return i!==e?null:{Hash:i,Mg:this.PawnTable_MGScore[t],Eg:this.PawnTable_EGScore[t],SideToMove:this.PawnTable_STM[t]}}Evaluate(){let e=[0,0],t=[0,0],i=this.BoardState.Phase,o=(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1])&~(this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6]),a=[0,0];if((this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6])===0n){if(this.IsDraw())return 0;let c=[64,64];for(;o;){let u=this.GetLS1B(o);o=this.RemoveBit(o,u);let P=this.BoardState.Squares[u];t[P.Color]+=this.EGPieceValue[P.Type],P.Type===5&&(c[P.Color]=u)}let d=this.distanceBetween[c[0]][c[1]];if(Math.abs(t[0]-t[1])>10)t[0]>t[1]?t[1]-=this.CenterManhattanDistance[c[1]]*50:t[0]-=this.CenterManhattanDistance[c[0]]*50;else return 0;return t[this.BoardState.SideToMove]-t[this.BoardState.SideToMove^1]-35*(7-d)}let r=this.EvaluatePawns();for(;o;){let c=this.GetLS1B(o),d=c;o=this.RemoveBit(o,c);let u=this.BoardState.Squares[c];switch(u.Color===1&&(c^=56),u.Type){case 1:{this.PawnAttacks[d+64*(u.Color^1)]&this.BoardState.PiecesBB[0+6*u.Color]&&!(this.PawnAttacks[d+64*u.Color]&this.BoardState.PiecesBB[0+6*(u.Color^1)])&&(e[u.Color]+=this.MGKnightOutpost,t[u.Color]+=this.EGKnightOutpost);break}case 2:{if(a[u.Color]++,this.isChess960&&(c===56||c===63)){let P=(c&7)===0?1n<<49n:1n<<54n;u.Color===1&&(P=P>>40n),(P&this.BoardState.PiecesBB[0+6*u.Color])!==0n&&(e[u.Color]-=this.MGCorneredBishopPenalty,t[u.Color]-=this.EGCorneredBishopPenalty)}break}case 3:{(this.fileMasks[d]&this.BoardState.PiecesBB[0+6*u.Color])===0n&&((this.fileMasks[d]&this.BoardState.PiecesBB[0+6*(u.Color^1)])===0n?e[u.Color]+=this.MGRookOpenFileBonus:e[u.Color]+=this.MGRookSemiOpenFileBonus);break}}e[u.Color]+=this.PST[0][u.Type][c]+this.MGPieceValue[u.Type],t[u.Color]+=this.PST[1][u.Type][c]+this.EGPieceValue[u.Type]}a[0]>=2&&(e[0]+=this.MGBishopPair,t[0]+=this.EGBishopPair),a[1]>=2&&(e[1]+=this.MGBishopPair,t[1]+=this.EGBishopPair);let h=e[this.BoardState.SideToMove]-e[this.BoardState.SideToMove^1]+r.opening,n=t[this.BoardState.SideToMove]-t[this.BoardState.SideToMove^1]+r.endgame;return i=(i*256+this.PhaseTotal/2)/this.PhaseTotal|0,(h*(256-i)+n*i)/256|0}EvaluatePawns(){let e=this.GetPawnEntry(this.BoardState.PawnHash);if(e)return e.SideToMove!==this.BoardState.SideToMove?{opening:e.Mg*-1,endgame:e.Eg*-1}:{opening:e.Mg,endgame:e.Eg};let t=[0,0],i=[0,0],s=this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6];for(;s;){let r=this.GetLS1B(s),h=r;s=this.RemoveBit(s,r);let n=this.BoardState.Squares[r],c=n.Color===0?8-(r>>3):1+(r>>3),d=n.Color===0?8:-8;n.Color===1&&(r^=56),this.Shift(this.squareBB[h],1)&this.BoardState.PiecesBB[0+6*n.Color]&&(i[n.Color]+=this.PawnDuoMulti[c-1]),this.PawnAttacks[h+64*(n.Color^1)]&this.BoardState.PiecesBB[0+6*n.Color]&&(i[n.Color]+=this.PawnSupportMulti[c-1]),(this.Shift(this.squareBB[h],d*-1)&this.BoardState.PiecesBB[0+6*n.Color])!==0n&&(t[n.Color]-=this.MGDoubledPawn,i[n.Color]-=this.EGDoubledPawn),(this.Fill(d*-1,h)&this.BoardState.PiecesBB[0+6*n.Color])===0n&&(this.passedMasks[n.Color][r]&this.BoardState.PiecesBB[0+6*(n.Color^1)])===0n&&(t[n.Color]+=this.MGPassedPawnRank[c-1],i[n.Color]+=this.EGPassedPawnRank[c-1]),(this.isolatedMasks[h]&this.BoardState.PiecesBB[0+6*n.Color])===0n&&(t[n.Color]-=this.MGIsolatedPawn,i[n.Color]-=this.EGIsolatedPawn),t[n.Color]+=this.PST[0][0][r]+this.MGPieceValue[0],i[n.Color]+=this.PST[1][0][r]+this.EGPieceValue[0]}let o=t[this.BoardState.SideToMove]-t[this.BoardState.SideToMove^1],a=i[this.BoardState.SideToMove]-i[this.BoardState.SideToMove^1];return this.StorePawnHash(this.BoardState.PawnHash,o,a,this.BoardState.SideToMove),{opening:o,endgame:a}}isGameOver(e){let t=this.BoardState.SideToMove,i=t^1,s=this.GetLS1B(this.BoardState.PiecesBB[5+6*t]),o=this.IsSquareAttacked(s,i);if(e===0)return o?{over:!0,reason:0}:{over:!0,reason:1};if(this.BoardState.HalfMoves>=100)return{over:!0,reason:2};let a=this.BoardState.Hash;return this.BoardHistory.filter(h=>h===a).length>=3?{over:!0,reason:3}:this.IsDraw()?{over:!0,reason:4}:{over:!1,reason:null}}IsDraw(){if((this.BoardState.PiecesBB[5]|this.BoardState.PiecesBB[11])===(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1]))return!0;let e=this.CountBits(this.BoardState.PiecesBB[0])+this.CountBits(this.BoardState.PiecesBB[6]),t=this.CountBits(this.BoardState.PiecesBB[1]),i=this.CountBits(this.BoardState.PiecesBB[7]),s=this.CountBits(this.BoardState.PiecesBB[2]),o=this.CountBits(this.BoardState.PiecesBB[8]),a=this.CountBits(this.BoardState.PiecesBB[3])+this.CountBits(this.BoardState.PiecesBB[9]),r=this.CountBits(this.BoardState.PiecesBB[4])+this.CountBits(this.BoardState.PiecesBB[10]),h=t+i+s+o;return a+r+e===0&&(h===1||h===2&&(t===1&&i===1||s===1&&o===1))}GetPv(){let e="";for(let t=0;t<this.pvLength[0];t++)e+=this.StringifyMove(this.pvArray[0][t])+" ";return e}FormatScore(e){return e<-this.MATE+this.MAXPLY?`mate ${(-this.MATE-e)/2}`:e>this.MATE-this.MAXPLY?`mate ${Math.round((this.MATE-e+1)/2)}`:`cp ${e|0}`}UpdatePv(e){this.pvArray[this.BoardState.Ply][this.BoardState.Ply]=e;for(let t=this.BoardState.Ply+1;t<this.pvLength[this.BoardState.Ply+1];t++)this.pvArray[this.BoardState.Ply][t]=this.pvArray[this.BoardState.Ply+1][t];this.pvLength[this.BoardState.Ply]=this.pvLength[this.BoardState.Ply+1]}Search(e){this.StartTimer();let t=-this.INFINITY,i=this.INFINITY,s=-this.INFINITY,o=Date.now();this.pvArray=Array(this.MAXPLY).fill(0).map(()=>Array(this.MAXPLY).fill(0)),this.pvLength=Array(this.MAXPLY).fill(0),this.nodesSearched=0,this.BoardState.Ply=0;for(let a=0;a<=1;a++)for(let r=0;r<=63;r++)for(let h=0;h<=63;h++)this.historyMoves[a][r][h]/=2;for(let a=1;a<=e;a++){let r=10;for(a>=5&&(t=Math.max(s-r,-this.INFINITY),i=Math.min(s+r,this.INFINITY));!this.Timer.stop;){if(s=this.NegaScout(t,i,a,0,!0),s<=t)t=Math.max(s-r,-this.INFINITY),i=(t+i)/2;else if(s>=i)i=Math.min(s+r,this.INFINITY);else break;r+=r/2}if(this.Timer.stop)break;let h=Date.now()}return this.pvArray[0][0]}NegaScout(e,t,i,s,o){if(this.nodesSearched%1e3===0&&(this.CheckTime(),this.Timer.stop))return this.ABORTEDSCORE;if(this.nodesSearched++,this.BoardState.Ply>=this.MAXPLY||(this.pvLength[this.BoardState.Ply]=this.BoardState.Ply,this.BoardState.Ply>0&&(this.IsRepetition()||this.BoardState.HalfMoves>100)))return 0;if(i<=0)return this.Quiescence(e,t,s);let a=t-e>1,r=1,h=-this.INFINITY,n=0,c=t,d=0,u=0,P=[],S=-this.INFINITY,B=this.GetEntry(this.BoardState.Hash);if(!a&&B&&B.Depth>=i&&(B.Flag===0||B.Flag===2&&B.Score>=t||B.Flag===1&&B.Score<=e))return B.Score;B&&(d=B.Move);let g=-this.INFINITY,f=this.IsSquareAttacked(this.GetLS1B(this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]),this.BoardState.SideToMove^1);if(d===0&&i>=3&&(i=i-1),!f&&!a){if(g=this.Evaluate(),i<=5&&g-60*i>=t&&Math.abs(g)<this.MATE-this.BoardState.Ply)return g;if(o&&g>=t&&(this.BoardState.OccupanciesBB[this.BoardState.SideToMove]^this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]^this.BoardState.PiecesBB[0+6*this.BoardState.SideToMove])!==0n){this.MakeNullMove();let m=3+Math.floor(i/5),T=-this.NegaScout(-t,-t+1,i-1-m,0,!1);if(this.UnmakeNullMove(),T>=t)return Math.abs(T)>this.MATE-this.BoardState.Ply?t:T}}if(e=Math.max(-this.MATE+this.BoardState.Ply,e),t=Math.min(this.MATE-this.BoardState.Ply,t),e>=t)return e;let k=this.ScoreMoves(this.GenerateMoves(),d,s);for(let m=0;m<k.length;m++){let T=this.NextMove(k,m).move;if(!a&&!f&&!this.IsCapture(T)&&!this.IsPromotion(T)&&(i<=10&&u>0&&g+110*i<e||i<=4&&u>8*i))continue;if(!this.MakeMove(T)){this.UnmakeMove(T);continue}u++;let y=f?1:0;if(i>=3&&m>4){let C=1/(4/i)|0;if(!this.IsCapture(T)&&!this.IsPromotion(T)&&C++,C=Math.max(0,C),S=-this.NegaScout(-e-1,-e,i-1-C+y,T,!0),S<=e){this.UnmakeMove(T);continue}}if(S=-this.NegaScout(-c,-e,i-1+y,T,!0),S>e&&S<t&&m>1&&(S=-this.NegaScout(-t,-e,i-1+y,T,!0)),this.UnmakeMove(T),this.Timer.stop)return this.ABORTEDSCORE;if(S>h&&(h=S,n=T),S>e&&(e=S,r=0,this.UpdatePv(T),this.Timer.extended=i>1&&S+35<this.bestMoveScore.score,this.bestMoveScore={move:n,score:h}),e>=t){if(r=2,!this.IsCapture(T)){this.killerMoves[this.BoardState.Ply][1]=this.killerMoves[this.BoardState.Ply][0],this.killerMoves[this.BoardState.Ply][0]=T,this.counterMoves[this.MoveFrom(s)][this.MoveTo(s)]=T,this.historyMoves[this.BoardState.SideToMove][this.MoveFrom(T)][this.MoveTo(T)]+=i*i;for(let C=0;C<P.length;C++)this.historyMoves[this.BoardState.SideToMove][this.MoveFrom(P[C])][this.MoveTo(P[C])]+=-i*i}break}this.IsCapture(T)||P.push(T),c=e+1}return u===0?f?-this.MATE+this.BoardState.Ply:0:(this.StoreEntry(this.BoardState.Hash,i,n,h,r),h)}Quiescence(e,t,i){if(this.nodesSearched%1e3===0&&(this.CheckTime(),this.Timer.stop))return this.ABORTEDSCORE;if(this.nodesSearched++,this.BoardState.Ply>=this.MAXPLY)return 0;let s=t-e>1,o=1,a=0,r=this.GetEntry(this.BoardState.Hash);if(!s&&r&&(r.Flag===0||r.Flag===2&&r.Score>=t||r.Flag===1&&r.Score<=e))return r.Score;r&&(a=r.Move);let h=this.Evaluate();if(h>=t)return h;h>e&&(e=h);let n=h,c=0,d=this.ScoreMoves(this.GenerateMoves(!0),a,i);for(let u=0;u<d.length;u++){let P=this.NextMove(d,u).move;if(h+150+this.MGPieceValue[4]<e||this.See(P)<0)continue;if(!this.MakeMove(P)){this.UnmakeMove(P);continue}let S=-this.Quiescence(-t,-e,P);if(this.UnmakeMove(P),S>n&&(n=S,c=P),S>=t){o=2;break}S>e&&(e=S,o=0)}return this.StoreEntry(this.BoardState.Hash,0,c,n,o),n}See(e){let t=this.MoveFrom(e),i=this.MoveTo(e),s=this.BoardState.Squares[t],o=this.BoardState.Squares[i]?.Type,a=this.BoardState.SideToMove^1,r=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1];if(s===void 0||o===void 0)return 0;let h=this.BoardState.PiecesBB[1]|this.BoardState.PiecesBB[7],n=this.BoardState.PiecesBB[2]|this.BoardState.PiecesBB[8],c=this.BoardState.PiecesBB[3]|this.BoardState.PiecesBB[9],d=this.BoardState.PiecesBB[4]|this.BoardState.PiecesBB[10],u=n|d,P=c|d,S=this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6]|n|c|d,B=[],g=0,f=this.squareBB[t],k=this.AttacksTo(i,r,h,u,P),m=0n;for(B[g]=this.MGPieceValue[o];f&&(g++,B[g]=this.MGPieceValue[s.Type]-B[g-1],!(Math.max(-B[g-1],B[g])<0));){k^=f,m|=f,f&S&&(k|=(u&this.GenerateBishopAttacks(r,i)|P&this.GenerateRookAttacks(r,i))&~m);let{bitboard:T,piece:y}=this.GetLeastValuablePiece(k,a,o);f=T,o=y,a^=1}for(;--g;)B[g-1]=-Math.max(-B[g-1],B[g]);return B[0]}AttacksTo(e,t,i,s,o){let a=this.BoardState.PiecesBB[0]&this.PawnAttacks[e+64]|this.BoardState.PiecesBB[6]&this.PawnAttacks[e],r=(this.BoardState.PiecesBB[5]|this.BoardState.PiecesBB[11])&this.KingAttacks[e];return s&=this.GenerateBishopAttacks(t,e),o&=this.GenerateRookAttacks(t,e),a|i&this.KnightAttacks[e]|r|s|o}GetLeastValuablePiece(e,t,i){for(i=0;i<=5;i++){let s=e&this.BoardState.PiecesBB[i+6*t];if(s)return{bitboard:s&-s,piece:i}}return{bitboard:0n,piece:0}}IsRepetition(){for(let e=this.boardStates.length-this.BoardState.HalfMoves;e<this.boardStates.length-1;e++)if(this.boardStates[e]?.Hash===this.BoardState.Hash)return!0;return!1}LoadFEN(e){this.BoardState.PiecesBB=new BigUint64Array(12),this.BoardState.OccupanciesBB=new BigUint64Array(2),this.BoardState.CastlingRights=0,this.BoardState.Squares=new Array(64).fill(void 0),this.BoardState.EnPassSq=64,this.BoardState.Phase=this.PhaseTotal,this.BoardState.CastlingSquaresMask=new Array(64).fill(15);let t=e.split(" ")[0].split(""),i=0;for(let h=0;h<t.length;h++){let n=t[h];switch(n.toLowerCase()){case"p":case"n":case"b":case"r":case"q":case"k":{let c=this.CharToPiece.get(n);this.PlacePiece(c.Type,c.Color,i),this.BoardState.Phase-=this.PhaseValues[c.Type],i++;break}case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":{i+=parseInt(n);break}case"/":break;default:throw new Error(`Unable to parse FEN character: ${n}`)}}this.BoardState.SideToMove=e.split(" ")[1]==="w"?0:1;let s=e.split(" ")[2].split("");for(let h of s){let n=h.toUpperCase()===h?0:1,c=this.GetLS1B(this.BoardState.PiecesBB[5+n*6]);if(this.BoardState.CastlingSquaresMask[c]=n===0?12:3,h.toUpperCase()==="K"){let d=this.BoardState.Squares.findIndex((u,P)=>u&&u.Type===3&&u.Color===n&&P>c&&P>>3===c>>3);n===0?(this.BoardState.CastlingRights|=1,this.BoardState.CastlingPaths[1]=(this.betweenMasks[c][62]|this.betweenMasks[d][61])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[1]=d,this.BoardState.CastlingSquaresMask[d]=14):(this.BoardState.CastlingRights|=4,this.BoardState.CastlingPaths[4]=(this.betweenMasks[c][6]|this.betweenMasks[d][5])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[4]=d,this.BoardState.CastlingSquaresMask[d]=11)}else if(h.toUpperCase()==="Q"){let d=this.BoardState.Squares.findIndex((u,P)=>u&&u.Type===3&&u.Color===n&&P<c&&P>>3===c>>3);n===0?(this.BoardState.CastlingRights|=2,this.BoardState.CastlingPaths[2]=(this.betweenMasks[c][58]|this.betweenMasks[d][59])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[2]=d,this.BoardState.CastlingSquaresMask[d]=13):(this.BoardState.CastlingRights|=8,this.BoardState.CastlingPaths[8]=(this.betweenMasks[c][2]|this.betweenMasks[d][3])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[8]=d,this.BoardState.CastlingSquaresMask[d]=7)}else if(h.toUpperCase()>="A"&&h.toUpperCase()<="H")if(h.toUpperCase().charCodeAt(0)-65>(c&7)){let d=this.BoardState.Squares.findIndex((u,P)=>u&&u.Type===3&&u.Color===n&&P>c&&P>>3===c>>3);n===0?(this.BoardState.CastlingRights|=1,this.BoardState.CastlingPaths[1]=(this.betweenMasks[c][62]|this.betweenMasks[d][61]|this.squareBB[62]|this.squareBB[61])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[1]=d,this.BoardState.CastlingSquaresMask[d]=14):(this.BoardState.CastlingRights|=4,this.BoardState.CastlingPaths[4]=(this.betweenMasks[c][6]|this.betweenMasks[d][5]|this.squareBB[6]|this.squareBB[5])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[4]=d,this.BoardState.CastlingSquaresMask[d]=11)}else if(n===0){let d=this.BoardState.Squares.findIndex((u,P)=>u&&u.Type===3&&u.Color===n&&P>=56&&P<c&&P>>3===c>>3);this.BoardState.CastlingRights|=2,this.BoardState.CastlingPaths[2]=(this.betweenMasks[c][58]|this.betweenMasks[d][59]|this.squareBB[58]|this.squareBB[59])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[2]=d,this.BoardState.CastlingSquaresMask[d]=13}else{let d=this.BoardState.Squares.findIndex((u,P)=>u&&u.Type===3&&u.Color===n&&P<c);this.BoardState.CastlingRights|=8,this.BoardState.CastlingPaths[8]=(this.betweenMasks[c][2]|this.betweenMasks[d][3]|this.squareBB[2]|this.squareBB[3])&~(this.BoardState.PiecesBB[5+n*6]|this.SetBit(0n,d)),this.BoardState.CastlingRookSquares[8]=d,this.BoardState.CastlingSquaresMask[d]=7}}let o=e.split(" ")[3];if(o!=="-"){let n="abcdefgh".indexOf(o.split("")[0]),d=(8-parseInt(o[1],10))*8+n;this.BoardState.EnPassSq=d}this.BoardState.Ply=parseInt(e.split(" ")[5])*2||0,this.BoardState.SideToMove===1&&(this.BoardState.Ply--,this.BoardState.Ply<0&&(this.BoardState.Ply=1)),this.BoardState.HalfMoves=parseInt(e.split(" ")[4])||0;let{hash:a,pawnHash:r}=this.GenerateHashes();this.BoardState.Hash=a,this.BoardState.PawnHash=r}GenerateFEN(){let e="";for(let t=0;t<=7;t++){let i=0;for(let s=0;s<=7;s++){let o=t*8+s,a=this.BoardState.Squares[o];if(a===void 0){i++;continue}i>0&&(e+=i.toString(),i=0);let r=this.PieceToChar.get(a.Type);a.Color===1&&(r=r.toLowerCase()),e+=r}i>0&&(e+=i.toString()),t>=0&&t!==7&&(e+="/")}if(this.BoardState.SideToMove===0?e+=" w ":e+=" b ",this.BoardState.CastlingRights===0&&(e+="-"),(this.BoardState.CastlingRights&1)!==0&&(e+="K"),(this.BoardState.CastlingRights&2)!==0&&(e+="Q"),(this.BoardState.CastlingRights&4)!==0&&(e+="k"),(this.BoardState.CastlingRights&8)!==0&&(e+="q"),e+=" ",this.BoardState.EnPassSq===64)e+="-";else{let t=(this.BoardState.EnPassSq^56)/8|0,i=(this.BoardState.EnPassSq^56)%8,s=`${String.fromCharCode(i+97)}${t+1}`;e+=s}return e+=" "+this.BoardState.HalfMoves.toString(),e}PrintBitboard(e){for(let t=0;t<8;t++){let i="";for(let s=0;s<8;s++){let o=t*8+s;s||(i+=`${t}  `),i+=` ${this.GetBit(e,o)?"1":"0"}`}}}PrintBoard(){let e=[["\u2659","\u2658","\u2657","\u2656","\u2655","\u2654"],["\u265F\uFE0E","\u265E","\u265D","\u265C","\u265B","\u265A"]];for(let t=0;t<8;t++){let i="";for(let s=0;s<8;s++){let o=t*8+s,a=this.BoardState.Squares[o]??null;s||(i+=`${t}`),a?i+=` ${e[a.Color][a.Type]}`:i+=" ."}}}StartTimer(){let e=0;if(this.Timer.stop=!1,this.Timer.extended=!1,!(this.Timer.timeleft===-1&&this.Timer.movetime===-1)){if(this.Timer.movestogo!==0){let t=Math.min(Math.max(this.Timer.movestogo,2),30);e=this.Timer.timeleft/t}else if(this.Timer.movetime!==-1)e=this.Timer.movetime;else{let t=25;this.BoardState.Ply<=20&&(t=45-this.BoardState.Ply),e=this.Timer.timeleft/t+this.Timer.increment/2}e>=this.Timer.timeleft&&(e-=this.Timer.increment),e<=0&&(e=this.Timer.increment-1),this.Timer.startTime=Date.now(),this.Timer.stopTime=this.Timer.startTime+e}}CheckTime(){if(!(!this.Timer.stop&&this.Timer.timeleft===-1&&this.Timer.movetime===-1)){if(Date.now()>this.Timer.stopTime){if(this.Timer.movetime!==-1){this.Timer.stop=!0;return}if(!this.Timer.extended){this.Timer.stop=!0;return}if(Date.now()-this.Timer.startTime>=this.Timer.timeleft*.6){this.Timer.stop=!0;return}return}Date.now()>this.Timer.stopTime&&(!this.Timer.extended||Date.now()-this.Timer.startTime>=this.Timer.timeleft*.75)&&(this.Timer.stop=!0)}}},_=F;function z(p,e,t,i,s){let o=b(p,e)&63,a=b(t,i)&63;return(s&63)<<12|o<<6|a}function U(p){let e=Math.floor(p/8),t=p%8;return[e,t]}function b(p,e){return p*8+e}async function x(p){return new Promise((e,t)=>{let i=new Image;i.onload=()=>e(i),i.onerror=t,i.src=p})}function Y(p,e,t,i,s){let o=p.clientX-e.left-26,a=p.clientY-e.top-120;if(o<0||a<0||o>=t*8||a>=i*8)return[-1,-1];let r=Math.floor(o/t),h=Math.floor(a/i),n=s==1?7-h:h,c=s==1?7-r:r;return[n,c]}function G({move:p,getPieceOnSq:e}){let t=p&63,i=p>>6&63,s=p>>12&15;if(s===2)return"O-O";if(s===3)return"O-O-O";let o=e(t);if(!o)return"";let a=P=>{let[S,B]=U(P);return"abcdefgh"[B]+"87654321"[S]},r=a(t),h=a(i),c=["","\u2658","\u2657","\u2656","\u2655","\u2654"][o.Type]||"",d=s===4||s===5||s===12||s===13||s===14||s===15,u="";if(o.Type===0){if(d?u=r[0]+"x"+h:u=h,s>=8&&s<=15){let P=["\u265E","\u2657","\u265C","\u265B"],S=s>=12?s-12:s-8;S>=0&&S<P.length&&(u+="="+P[S])}}else{let P=d?"x":"";u=c+r+P+h}return u}function ee(p,e){let t=new _;try{t.LoadFEN(p)}catch{alert("Invalid FEN. Please check and try again.")}let i=e,s=new Set,o=new Map;function a(){s.clear(),o.clear(),t.GenerateLegalMoves().forEach(B=>{s.add(B);let g=B>>6&63,f=B&63;o.has(g)||o.set(g,[]),o.get(g).push(f)})}function r(S){return o.size==0||!o.has(S)?[]:o.get(S)}function h(S,B,g,f){let k=0;if(!g)return null;if(g.Type===0&&(g.Color===0&&B>=0&&B<=7||g.Color===1&&B>=56&&B<=63))k=f?15:11;else if(f&&g.Color===f.Color&&g.Type===5&&f.Type===3){let m=B>S,T=S===60&&(B===63||B===56),y=S===4&&(B===7||B===0);(T||y)&&(k=m?2:3)}else g.Type===0&&t.BoardState.EnPassSq===B?k=5:f&&(k=4);return k}function n(S,B,g,f,k){if(k===null)return!1;let m=z(S,B,g,f,k);return s.has(m)?m:!1}function c(){let S=t.Search(11);return t.MakeMove(S),S}function d(){let S=t.isGameOver(s.size),B=null;return S.over&&S.reason===0&&(B=t.BoardState.SideToMove===0?1:0),{over:S.over,winner:B}}function u(S){return t.BoardState.Squares[S]??null}function P(S){t.MakeMove(S)}return{get isUserTurn(){return t.BoardState.SideToMove==i},checkGameOver:d,makeComputerMove:c,validateUserMove:n,makeMove:P,buildMoveSet:a,getMovesFromSq:r,getUserMoveType:h,getPieceOnSq:u}}var Z=ee;function E({ctx:p,userColor:e,tileImage:t,ranksImage:i,tileWidth:s,tileHeight:o}){p.fillStyle="rgb(69 77 95)",p.fillRect(0,100,468,360),p.strokeStyle="white",p.lineWidth=2,p.strokeRect(24,118,420,324),p.fillStyle="rgb(48 48 64)",p.fillRect(0,460,468,14);let a=26,r=120;for(let h=0;h<8;h++){let n=e==1?7-h:h;p.drawImage(i,h*6,0,5,16,12,r+o/4+n*o,5,16),p.drawImage(i,48+h*6,0,5,16,a+s/4+n*s+4,438,6,18);let c=h%2===0;for(let d=0;d<8;d++){let u=c?0:64,P=a+h*s,S=r+d*o;p.drawImage(t,u,0,64,48,P,S,s,o),c=!c}}}function K({ctx:p,getPieceOnSq:e,userColor:t,piecesImage:i,pieceWidth:s,pieceHeight:o,tileWidth:a,tileHeight:r}){let h=[0,16,32,48,64,80],n=[...Array(8).keys()],c=[...Array(8).keys()];t==1&&(n.reverse(),c.reverse());let d=t===1?(u,P)=>[7-u,7-P]:(u,P)=>[u,P];for(let u of n)for(let P of c){let S=b(u,P),B=e(S);if(!B)continue;let g=B.Color===0?0:32,f=h[B.Type],[k,m]=d(u,P);p.drawImage(i,f,g,16,32,28+m*a,r+24+k*r,s,o)}}function O({ctx:p,userColor:e,emptyTileImage:t,selected:i,selectedMoves:s,tileWidth:o,tileHeight:a,getPieceOnSq:r}){let h=i.row,n=i.col;e==1&&(n=7-n,h=7-h);let c=n*o+26,d=h*a+120;p.fillStyle="rgb(155, 165, 180)",p.fillRect(c,d,o,a),s.forEach(u=>{let[P,S]=U(u),B=r(u),g=B?B.Color==e:!1;e==1&&(P=7-P,S=7-S),B?(p.strokeStyle="red",g&&(p.strokeStyle="#28cc08"),p.lineWidth=3,p.strokeRect(27+S*o,121+P*a,o-3,a-3)):p.drawImage(t,0,0,22,15,40+S*o,132+P*a,22,15)})}function W({ctx:p,userColor:e,piecesImage:t,pieceWidth:i,pieceHeight:s,tileWidth:o,tileHeight:a}){[64,48,32,16].forEach((h,n)=>{let c=e===0?0:32,d=n+2;p.drawImage(t,h,c,16,32,28+d*o,a+24+0*a,i,s)})}async function te({canvas:p,userColor:e,getPieceOnSq:t,tileSize:i}){let[s,o]=i,a=p.getContext("2d");a.imageSmoothingEnabled=!1;let r=48,h=96,[n,c,d,u]=await Promise.all([x("./assets/tiles.png"),x("./assets/ranks.png"),x("./assets/pieces.png"),x("./assets/empty2.png")]);function P(){a.clearRect(0,0,p.width,p.height),E({ctx:a,userColor:e,tileImage:n,ranksImage:c,tileWidth:s,tileHeight:o}),K({ctx:a,getPieceOnSq:t,userColor:e,piecesImage:d,pieceWidth:r,pieceHeight:h,tileWidth:s,tileHeight:o})}function S(g,f){a.clearRect(0,0,p.width,p.height),E({ctx:a,userColor:e,tileImage:n,ranksImage:c,tileWidth:s,tileHeight:o}),O({ctx:a,emptyTileImage:u,userColor:e,selected:g,selectedMoves:f,tileWidth:s,tileHeight:o,getPieceOnSq:t}),K({ctx:a,getPieceOnSq:t,userColor:e,piecesImage:d,pieceWidth:r,pieceHeight:h,tileWidth:s,tileHeight:o})}function B(){a.clearRect(0,0,p.width,p.height),E({ctx:a,userColor:e,tileImage:n,ranksImage:c,tileWidth:s,tileHeight:o}),W({ctx:a,userColor:e,piecesImage:d,pieceWidth:r,pieceHeight:h,tileWidth:s,tileHeight:o})}return{drawBoardAndPieces:P,highlightMoves:S,showPawnPromotion:B}}var $=te;async function V(p,e){let s=Z(p,e),o=document.getElementById("chess"),a=document.getElementById("moves"),r=await $({tileSize:[52,40],userColor:e,canvas:o,getPieceOnSq:s.getPieceOnSq}),h=null,n=!1,c=null;function d(m){if(!s.isUserTurn)return;let T=o.getBoundingClientRect(),[y,C]=Y(m,T,52,40,e);if(y===-1||C===-1)return;if(n&&c){if(y===0&&C>=2&&C<=5){let v=B(c,C);P(v)}else r.drawBoardAndPieces();h=null,n=!1;return}let M=b(y,C),I=s.getPieceOnSq(M),L=I?I.Color===e:!1;if(!h?.piece){L&&g(I,y,C,M);return}let j=b(h.row,h.col),R=s.getUserMoveType(j,M,h.piece,I);if(L){if(R===3||R===2){let v=s.validateUserMove(h.row,h.col,y,C,R);if(v){h=null,P(v);return}}g(I,y,C,M)}else{let v=s.validateUserMove(h.row,h.col,y,C,R);h=null,v?R===11||R===15?(r.showPawnPromotion(),n=!0,c=v):P(v):r.drawBoardAndPieces()}}function u(){return new Promise(m=>requestAnimationFrame(()=>requestAnimationFrame(()=>m())))}async function P(m){s.makeMove(m),r.drawBoardAndPieces();let T=G({move:m,getPieceOnSq:s.getPieceOnSq});S(T),s.buildMoveSet();let y=s.checkGameOver();if(y.over){f(y.winner);return}await u();let C=s.makeComputerMove();r.drawBoardAndPieces();let M=G({move:C,getPieceOnSq:s.getPieceOnSq});S(M),s.buildMoveSet(),y=s.checkGameOver(),y.over&&f(y.winner)}function S(m){let T=document.createElement("span");T.textContent=m;let y=e===0?"white-move":"black-move",C=e===0?"black-move":"white-move",M=s.isUserTurn?C:y;T.classList.add(M),a.appendChild(T),a.scrollTop=a.scrollHeight}function B(m,T){let y=(m>>12&15)>11,C=T-2,M=(y?15:11)-C;return m=m&4095|M<<12,m}function g(m,T,y,C){h={piece:m,row:T,col:y};let M=s.getMovesFromSq(C)||[];r.highlightMoves(h,M)}function f(m){let T=document.createElement("span");N=!0,k(),T.style.color="white",m!==null?m===e?(T.textContent="You Won!",T.style.backgroundColor="#1da801"):(T.textContent="Checkmate!",T.style.backgroundColor="#d10a0a"):(T.textContent="Draw",T.style.backgroundColor="grey"),a.appendChild(T),w.textContent="Start Game",w.style.backgroundColor="#1da303",a.scrollTop=a.scrollHeight}function k(){o.removeEventListener("click",d)}return{draw(){r.drawBoardAndPieces()},async start(){o.removeEventListener("click",d),o.addEventListener("click",d),a.innerHTML="",s.isUserTurn?s.buildMoveSet():setTimeout(()=>{let m=s.makeComputerMove();r.drawBoardAndPieces();let T=G({move:m,getPieceOnSq:s.getPieceOnSq});S(T),s.buildMoveSet();let y=s.checkGameOver();y.over&&f(y.winner)},900)},stop:k}}var X="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",N=!0,Q=0,w=document.getElementById("startBtn"),q=await V(X,Q);q.draw();w.addEventListener("click",async()=>{let p=document.getElementById("fen"),e=document.getElementById("colorSelect");if(N){let t=p.value.trim()||X;Q=e.value==="white"?0:1,N=!1,q=await V(t,Q),q.draw(),q.start(),w.textContent="Surrender",w.style.backgroundColor="#d10a0a"}else w.textContent="Start Game",w.style.backgroundColor="#1da801",q.stop(),N=!0});
